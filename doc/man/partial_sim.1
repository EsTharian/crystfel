.\"
.\" partial_sim man page
.\"
.\" Copyright © 2012 Thomas White <taw@physics.org>
.\"
.\" Part of CrystFEL - crystallography with a FEL
.\"

.TH PARTIAL_SIM 1
.SH NAME
partial_sim \- calculate partial reflections
.SH SYNOPSIS
.PP
.B partial_sim
-o simulated.stream -g geometry.geom -b xrays.beam -p unitcell.pdb
.BR [options]

.B partial_sim
--help

.SH DESCRIPTION
partial_sim calculates the intensities of idealised partial reflections from crystals in random orientations, which is useful for testing the convergence of Monte Carlo integration or scaling/post-refinement techniques.

.P
You need to provide a CrystFEL geometry file (with
.BR --geometry=my.geom
or
.BR "-g my.geom" ),
a beam description file (with
.BR --beam=my.beam
or
.BR "-b my.beam" ),
a PDB file containing at least a CRYST1 line specifying the unit cell to use for the simulation (with
.BR --pdb=my.pdb
or
.BR "-p my.pdb" ),
and an output filename with
.BR --output=my.stream
or
.BR "-o my.stream" .

For each randomly generated orientation, partial_sim calculates which reflections would appear on the detector with the specified beam parameters.  It calculates the partiality for each reflection and multiplies it by the fully integrated intensity to produce a partial intensity.  The fully integrated intensities can be taken from a file you provide (see below), otherwise they will be randomly generated (by taking the absolute value of a Gaussian random number, mean zero and standard deviation 1000).  All the partial intensities for the orientation are multiplied by an overall scaling factor, which is randomly generated with a Gaussian distribution with mean 1 and standard deviation 0.3.  The partial intensities are written to the output stream, and the process repeated for as many different orientations as you ask for (see below, default: 2).

.P
See
.BR "man crystfel_geometry"
for information about CrystFEL geometry description files.

.SH OPTIONS
.PD 0
.B
.IP "-i <file.hkl>"
.B
.IP --input=<file.hkl>
.PD
Take the fully integrated reflection intensities from <file.hkl>, instead of generating them randomly.

.B
.IP -n <n>
Specify the number of different orientations to simulate.  Default: 2.

.PD 0
.B
.IP "-r <random.hkl>"
.B
.IP --save-random=<random.hkl>
.PD
If you did not provide your own fully integrated reflection intensities, they will be generated randomly for you.  Use this option to save the random intensities for future comparisons.

.PD 0
.B
.IP "-y <pointgroup>"
.B
.IP --symmetry=<pointgroup>
.PD
Specifies the symmetry of the input reflection list (with
.B -i ,
or the symmetry of the randomly generated intensities.

.PD 0
.B
.IP "-c <val>"
.B
.IP "--cnoise=<val>
.PD
Add random values with a flat distribution to the components of the reciprocal lattice vectors written to the stream, simulating indexing errors.  The maximum value that will be added is +/-
.BR <val>
percent.

.SH AUTHOR
This page was written by Thomas White.

.SH REPORTING BUGS
Report bugs to <taw@physics.org>, or visit <http://www.desy.de/~twhite/crystfel>.

.SH COPYRIGHT
Copyright © 2012 Thomas White <taw@physics.org>
.P
partial_sim is part of CrystFEL.
.P
CrystFEL is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
.P
CrystFEL is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
.P
You should have received a copy of the GNU General Public License along with CrystFEL.  If not, see <http://www.gnu.org/licenses/>.

.SH SEE ALSO
.BR process_hkl (1),
.BR partialator (1),
.BR pattern_sim (1)
and
.BR crystfel_geometry (1).
